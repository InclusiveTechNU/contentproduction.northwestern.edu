{"version":3,"sources":["webpack:///./src/components/ProjectCard.jsx","webpack:///./src/pages/projects.js"],"names":["ProjectCardContainer","dimensions","maxwidthTablet","maxwidthMobile","props","secondaryColor","ProjectCardContent","ProjectCardCategory","colors","grey600","ProjectCardTitle","ProjectCardBlurb","ProjectCardImageContainer","ProjectCard","category","title","description","thumbnail","color","uid","to","className","text","RichText","render","aria-hidden","style","background","src","url","alt","role","WorkTitle","Work","projects","meta","titleTemplate","name","content","property","author","concat","Layout","map","project","i","key","node","project_category","project_title","project_preview_description","project_preview_thumbnail","_meta","primary_color","secondary_color","query","data","prismic","allProjects","edges","site","siteMetadata"],"mappings":"sOAQMA,EAAuB,YAAO,MAAP,qBAAH,4PAaHC,IAAWC,eAbR,mDAiBHD,IAAWE,eAjBR,qIA0BL,SAAAC,GAAK,OAAIA,EAAMC,iBA1BV,qRAgDpBC,EAAqB,YAAO,MAAP,qBAAH,uJAYF,SAAAF,GAAK,OAAIA,EAAMC,iBAZb,iJAsBDJ,IAAWC,eAtBV,oBA2BlBK,EAAsB,YAAO,KAAP,qBAAH,yBAEZC,IAAOC,QAFK,KAKnBC,EAAmB,YAAO,KAAP,qBAAH,iEAKhBC,EAAmB,YAAO,MAAP,qBAAH,2EAKCV,IAAWC,eALZ,6BA0BhBU,EAA4B,YAAO,MAAP,qBAAH,+GAORX,IAAWC,eAPH,mMAsBT,SAAAE,GAAK,OAAIA,EAAMC,iBAtBN,oHAgCJJ,IAAWC,eAhCP,0BA8DhBW,EAnBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,UAAgBC,GAAjD,EAA4CC,IAA5C,EAAiDD,OAAOb,EAAxD,EAAwDA,eAAxD,OAChB,YAACL,EAAD,CAAsBK,eAAgBA,EAAgBe,GAAE,iBACpD,YAACd,EAAD,CAAoBD,eAAgBA,EAAgBgB,UAAU,sBAC1D,YAACd,EAAD,KACKO,EAAS,GAAGQ,MAEjB,YAACZ,EAAD,KACKK,EAAM,GAAGO,MAEd,YAACX,EAAD,KACKY,WAASC,OAAOR,KAGzB,YAACJ,EAAD,CAA2Ba,cAAY,OAAOpB,eAAgBA,EAAgBqB,MAAO,CAACC,WAAYT,GAAQG,UAAU,6BAChH,mBAAKO,IAAKX,EAAUY,IAAKC,IAAI,GAAGC,KAAK,oB,sCCxKjD,IAAMC,EAAY,YAAO,KAAP,qBAAH,6CAITC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACT,8BACI,YAAC,IAAD,CACIpB,MAAK,kCACLqB,cAAa,KACbD,KAAM,CACF,CACIE,KAAK,cACLC,QAASH,EAAKnB,aAElB,CACIuB,SAAS,WACTD,QAAQ,mCAEZ,CACIC,SAAS,iBACTD,QAASH,EAAKnB,aAElB,CACIuB,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,QAASH,EAAKK,QAElB,CACIH,KAAK,gBACLC,QAASH,EAAKpB,OAElB,CACIsB,KAAK,sBACLC,QAASH,EAAKnB,cAEpByB,OAAON,KAEb,YAACO,EAAA,EAAD,KACI,YAACV,EAAD,iBAGA,8BACKE,EAASS,KAAI,SAACC,EAASC,GAAV,OACV,YAAC,EAAD,CACIC,IAAKD,EACL/B,SAAU8B,EAAQG,KAAKC,iBACvBjC,MAAO6B,EAAQG,KAAKE,cACpBjC,YAAa4B,EAAQG,KAAKG,4BAC1BjC,UAAW2B,EAAQG,KAAKI,0BACxBhC,IAAKyB,EAAQG,KAAKK,MAAMjC,IACxBD,MAAO0B,EAAQG,KAAKM,cACpBhD,eAAgBuC,EAAQG,KAAKO,yBAsBxCC,GAdE,sBAAe,IAAZC,EAAW,EAAXA,KACRtB,EAAWsB,EAAKC,QAAQC,YAAYC,MACpCxB,EAAOqB,EAAKI,KAAKC,aACvB,OAAK3B,EAGD,YAAC,EAAD,CAAMA,SAAUA,EAAUC,KAAMA,IAHd,MAWR","file":"component---src-pages-projects-js-950c8b15231bbb29680b.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { RichText } from \"prismic-reactjs\";\nimport styled from \"@emotion/styled\";\nimport dimensions from \"styles/dimensions\";\nimport colors from \"styles/colors\";\nimport PropTypes from \"prop-types\";\n\nconst ProjectCardContainer = styled(\"div\")`\n    display: grid;\n    grid-template-columns: 4fr 7fr;\n    box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.06);\n    margin-bottom: 4em;\n    transition: all 150ms ease-in-out;\n    text-decoration: none;\n    color: currentColor;\n\n    @media(max-width:950px) {\n        grid-template-columns: 4.5fr 7fr;\n    }\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        grid-template-columns: 1fr;\n    }\n\n    @media(max-width:${dimensions.maxwidthMobile}px) {\n        margin-bottom: 2em;\n    }\n\n    &:hover {\n        box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.1);\n        transition: all 150ms ease-in-out;\n\n        .ProjectCardAction {\n            color: ${props => props.secondaryColor};\n            transition: all 150ms ease-in-out;\n\n            span {\n                transform: translateX(0px);\n                opacity: 1;\n                transition: transform 150ms ease-in-out;\n            }\n        }\n\n        .ProjectCardContent::before {\n            opacity: 0.02;\n            transition: all 150ms ease-in-out;\n        }\n\n        .ProjectCardImageContainer::before {\n            opacity: 0.2;\n            transition: all 150ms ease-in-out;\n        }\n    }\n`\n\nconst ProjectCardContent = styled(\"div\")`\n    background: white;\n    padding: 4em 3em 2.25em 3em;\n    position: relative;\n\n    &:before {\n        position: absolute;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background: ${props => props.secondaryColor};\n        mix-blend-mode: multiply;\n        opacity: 0;\n        transition: all 150ms ease-in-out;\n    }\n\n    @media(max-width:950px) {\n        padding: 3.25em 2.5em 2em 2.5em;\n    }\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        grid-row: 2;\n    }\n`\n\nconst ProjectCardCategory = styled(\"h6\")`\n    font-weight: 600;\n    color: ${colors.grey600};\n`\n\nconst ProjectCardTitle = styled(\"h3\")`\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n`\n\nconst ProjectCardBlurb = styled(\"div\")`\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n    margin-bottom: 5em;\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        margin-bottom: 2.5em;\n    }\n`\n\nconst ProjectCardAction = styled(\"div\")`\n    font-weight: 600;\n    text-decoration: none;\n    color: currentColor;\n    transition: all 150ms ease-in-out;\n    bottom: 45px;\n    position: absolute;\n\n    span {\n        margin-left: 1em;\n        transform: translateX(-8px);\n        display: inline-block;\n        transition: transform 400ms ease-in-out;\n    }\n`\n\nconst ProjectCardImageContainer = styled(\"div\")`\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    overflow: hidden;\n    position: relative;\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        padding-top: 3em;\n        max-height: 200px;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n    }\n\n    &:before {\n        position: absolute;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background: ${props => props.secondaryColor};\n        mix-blend-mode: multiply;\n        opacity: 0;\n        transition: all 150ms ease-in-out;\n    }\n\n    img {\n        height: 100%;\n        width: 100%;\n\n        @media(max-width:${dimensions.maxwidthTablet}px) {\n            max-width: 300px;\n        }\n    }\n`\n\n/*\n            <ProjectCardAction className=\"ProjectCardAction\">\n                Details <span>&#8594;</span>\n            </ProjectCardAction>\n*/\nconst ProjectCard = ({ category, title, description, thumbnail, uid, color, secondaryColor}) => (\n    <ProjectCardContainer secondaryColor={secondaryColor} to={`/publications`}>\n        <ProjectCardContent secondaryColor={secondaryColor} className=\"ProjectCardContent\">\n            <ProjectCardCategory>\n                {category[0].text}\n            </ProjectCardCategory>\n            <ProjectCardTitle>\n                {title[0].text}\n            </ProjectCardTitle>\n            <ProjectCardBlurb>\n                {RichText.render(description)}\n            </ProjectCardBlurb>\n        </ProjectCardContent>\n        <ProjectCardImageContainer aria-hidden=\"true\" secondaryColor={secondaryColor} style={{background: color}} className=\"ProjectCardImageContainer\">\n            <img src={thumbnail.url} alt=\"\" role=\"presentation\"/>\n        </ProjectCardImageContainer>\n    </ProjectCardContainer>\n)\n\nexport default ProjectCard;\n\nProjectCard.propTypes = {\n    category: PropTypes.array.isRequired,\n    thumbnail: PropTypes.object.isRequired,\n    title: PropTypes.array.isRequired,\n    description: PropTypes.array.isRequired,\n    uid: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    secondaryColor: PropTypes.string.isRequired\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport Layout from \"components/Layout\";\nimport ProjectCard from \"components/ProjectCard\";\n\nconst WorkTitle = styled(\"h1\")`\n    margin-bottom: 1em;\n`\n\nconst Work = ({ projects, meta }) => (\n    <>\n        <Helmet\n            title={`Projects | Inclusive Creativity`}\n            titleTemplate={`%s`}\n            meta={[\n                {\n                    name: `description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:title`,\n                    content: `Projects | Inclusive Creativity`,\n                },\n                {\n                    property: `og:description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: meta.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: meta.title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: meta.description,\n                },\n            ].concat(meta)}\n        />\n        <Layout>\n            <WorkTitle>\n                Projects\n            </WorkTitle>\n            <>\n                {projects.map((project, i) => (\n                    <ProjectCard\n                        key={i}\n                        category={project.node.project_category}\n                        title={project.node.project_title}\n                        description={project.node.project_preview_description}\n                        thumbnail={project.node.project_preview_thumbnail}\n                        uid={project.node._meta.uid}\n                        color={project.node.primary_color}\n                        secondaryColor={project.node.secondary_color}\n                    />\n                ))}\n            </>\n        </Layout>\n    </>\n);\n\nexport default ({ data }) => {\n    const projects = data.prismic.allProjects.edges;\n    const meta = data.site.siteMetadata;\n    if (!projects) return null;\n\n    return (\n        <Work projects={projects} meta={meta}/>\n    )\n}\n\nWork.propTypes = {\n    projects: PropTypes.array.isRequired,\n};\n\nexport const query = graphql`\n    {\n        prismic {\n            allProjects {\n                edges {\n                    node {\n                        project_title\n                        project_preview_description\n                        project_preview_thumbnail\n                        project_category\n                        project_post_date\n                        secondary_color\n                        primary_color\n                        _meta {\n                            uid\n                        }\n                    }\n                }\n            }\n        }\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`\n"],"sourceRoot":""}