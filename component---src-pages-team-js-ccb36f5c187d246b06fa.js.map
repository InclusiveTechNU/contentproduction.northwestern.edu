{"version":3,"sources":["webpack:///./src/components/PersonCard.jsx","webpack:///./src/pages/team.js"],"names":["PersonCardContainer","props","secondaryColor","PersonCardContent","PersonCardCategory","colors","grey600","PersonCardTitle","PersonCardBlurb","PersonCardAction","PersonCardImageContainer","PersonCard","link","name","title","image","bio","href","target","className","src","url","role","text","WorkTitle","PersonsContainer","Work","persons","meta","titleTemplate","content","description","property","author","concat","Layout","map","person","i","node","query","data","prismic","allPersons","edges","site","siteMetadata","sort","a","b","aTitle","bTitle","indexOf"],"mappings":"oPAYMA,EAAsB,YAAO,IAAP,qBAAH,w2BAyDJ,SAAAC,GAAK,OAAIA,EAAMC,iBAzDX,mRA+EnBC,EAAoB,YAAO,MAAP,qBAAH,oKAaD,SAAAF,GAAK,OAAIA,EAAMC,iBAbd,yEAoBjBE,EAAqB,YAAO,KAAP,qBAAH,yBAEXC,IAAOC,QAFI,KAKlBC,EAAkB,YAAO,KAAP,qBAAH,iEAKfC,EAAkB,YAAO,MAAP,qBAAH,kFAMfC,EAAmB,YAAO,MAAP,qBAAH,gQAgBhBC,EAA2B,YAAO,MAAP,qBAAH,oLAcR,SAAAT,GAAK,OAAIA,EAAMC,iBAdP,qGAgDfS,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,IAA7B,OACf,YAAChB,EAAD,CAAqBiB,KAAML,EAAMM,OAAO,UACpC,YAACR,EAAD,CAA0BS,UAAU,4BAChC,mBAAKC,IAAKL,EAAMM,IAAKC,KAAK,kBAE9B,YAACnB,EAAD,CAAmBgB,UAAU,qBACzB,YAACZ,EAAD,KACKM,EAAK,GAAGU,MAEb,YAACnB,EAAD,KACKU,EAAM,GAAGS,MAEd,YAACf,EAAD,KACKQ,EAAI,GAAGO,MAEZ,YAACd,EAAD,CAAkBU,UAAU,oBAA5B,WACY,iC,sCCjLxB,IAAMK,EAAY,YAAO,KAAP,sBAAH,6CAITC,EAAmB,YAAO,MAAP,sBAAH,uDAKhBC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OACT,8BACI,YAAC,IAAD,CACId,MAAK,8BACLe,cAAa,KACbD,KAAM,CACF,CACIf,KAAK,cACLiB,QAASF,EAAKG,aAElB,CACIC,SAAS,WACTF,QAAQ,+BAEZ,CACIE,SAAS,iBACTF,QAASF,EAAKG,aAElB,CACIC,SAAS,UACTF,QAAQ,WAEZ,CACIjB,KAAK,eACLiB,QAAQ,WAEZ,CACIjB,KAAK,kBACLiB,QAASF,EAAKK,QAElB,CACIpB,KAAK,gBACLiB,QAASF,EAAKd,OAElB,CACID,KAAK,sBACLiB,QAASF,EAAKG,cAEpBG,OAAON,KAEb,YAACO,EAAA,EAAD,KACI,YAACX,EAAD,aAGA,YAACC,EAAD,KACKE,EAAQS,KAAI,SAACC,EAAQC,GAAT,OACT,YAAC,EAAD,CACI1B,KAAMyB,EAAOE,KAAK3B,KAAKS,IACvBR,KAAMwB,EAAOE,KAAK1B,KAClBC,MAAOuB,EAAOE,KAAKzB,MACnBC,MAAOsB,EAAOE,KAAKxB,MACnBC,IAAKqB,EAAOE,KAAKvB,aAoC5BwB,GA5BE,sBAAe,IAAZC,EAAW,EAAXA,KACRd,EAAUc,EAAKC,QAAQC,WAAWC,MAClChB,EAAOa,EAAKI,KAAKC,aACvB,OAAKnB,GAELA,EAAQoB,MAAK,SAACC,EAAGC,GACb,IAAMC,EAASF,EAAET,KAAKzB,MAAM,GAAGS,KACzB4B,EAASF,EAAEV,KAAKzB,MAAM,GAAGS,KAC/B,OAAiD,IAA7C2B,EAAOE,QAAQ,2BACP,EAC4C,IAA7CD,EAAOC,QAAQ,0BACf,GAC8C,IAA9CF,EAAOE,QAAQ,2BACd,GAC6C,IAA9CD,EAAOC,QAAQ,0BACf,EAEJ,KAGP,YAAC,EAAD,CAAMzB,QAASA,EAASC,KAAMA,KAjBb,MAyBP","file":"component---src-pages-team-js-ccb36f5c187d246b06fa.js","sourcesContent":["import React from \"react\";\nimport { RichText } from \"prismic-reactjs\";\nimport styled from \"@emotion/styled\";\nimport dimensions from \"styles/dimensions\";\nimport colors from \"styles/colors\";\nimport PropTypes from \"prop-types\";\n\nconst PersonCardFlexBox = styled(\"div\")`\n    width: fit-content;\n    height: fit-content;\n`\n\nconst PersonCardContainer = styled(\"a\")`\n    width: 410px;\n    margin-right: 30px;\n    display: inline-block;\n    box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.06);\n    margin-bottom: 4em;\n    vertical-align:top;\n    transition: all 150ms ease-in-out;\n    text-decoration: none;\n    color: currentColor;\n\n    @media(min-width: 1377px) {\n        &:nth-child(3n+3) {\n            margin-right: 0px !important;\n        }\n    }\n\n    @media(max-width: 1419px) {\n        margin-right: 20px;\n    }\n\n    @media(max-width: 1409px) {\n        margin-right: 10px;\n    }\n\n    @media(max-width: 1377px) {\n        &:nth-child(2n+2) {\n            margin-right: 0px !important;\n            margin-left: 0px !important;\n        }\n        margin-left: calc(56% - 500px);\n        margin-right: 75px;\n    }\n\n    @media(max-width: 1025px) {\n        margin-right: 40px !important;\n    }\n\n    @media(max-width: 990px) {\n        margin-right: 20px !important;\n    }\n\n    @media(max-width: 900px) {\n        display: block;\n        margin-left: 0 !important;\n        margin-right: 0px !important;\n    }\n\n    @media(max-width: 600px) {\n        font-size: 16px !important;\n    }\n\n    &:hover {\n        box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.1);\n        transition: all 150ms ease-in-out;\n\n        .PersonCardAction {\n            color: ${props => props.secondaryColor};\n            transition: all 150ms ease-in-out;\n\n            span {\n                transform: translateX(0px);\n                opacity: 1;\n                transition: transform 150ms ease-in-out;\n            }\n        }\n\n        .PersonCardContent::before {\n            opacity: 0.02;\n            transition: all 150ms ease-in-out;\n        }\n\n        .PersonCardImageContainer::before {\n            opacity: 0.2;\n            transition: all 150ms ease-in-out;\n        }\n    }\n`\n\nconst PersonCardContent = styled(\"div\")`\n    background: white;\n    padding: 4em 3em 2.25em 3em;\n    position: relative;\n    height: 570px;\n\n    &:before {\n        position: absolute;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background: ${props => props.secondaryColor};\n        mix-blend-mode: multiply;\n        opacity: 0;\n        transition: all 150ms ease-in-out;\n    }\n`\n\nconst PersonCardCategory = styled(\"h6\")`\n    font-weight: 600;\n    color: ${colors.grey600};\n`\n\nconst PersonCardTitle = styled(\"h3\")`\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n`\n\nconst PersonCardBlurb = styled(\"div\")`\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n    margin-bottom: 5em;\n`\n\nconst PersonCardAction = styled(\"div\")`\n    font-weight: 600;\n    text-decoration: none;\n    color: currentColor;\n    transition: all 150ms ease-in-out;\n    bottom: 45px;\n    position: absolute;\n\n    span {\n        margin-left: 1em;\n        transform: translateX(-8px);\n        display: inline-block;\n        transition: transform 400ms ease-in-out;\n    }\n`\n\nconst PersonCardImageContainer = styled(\"div\")`\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    overflow: hidden;\n    position: relative;\n\n    &:before {\n        position: absolute;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background: ${props => props.secondaryColor};\n        mix-blend-mode: multiply;\n        opacity: 0;\n        transition: all 150ms ease-in-out;\n    }\n\n    img {\n        height: 100%;\n        width: 100%;\n    }\n`\n\nconst PersonCard = ({ link, name, title, image, bio}) => (\n    <PersonCardContainer href={link} target=\"_blank\">\n        <PersonCardImageContainer className=\"PersonCardImageContainer\">\n            <img src={image.url} role=\"presentation\"/>\n        </PersonCardImageContainer>\n        <PersonCardContent className=\"PersonCardContent\">\n            <PersonCardTitle>\n                {name[0].text}\n            </PersonCardTitle>\n            <PersonCardCategory>\n                {title[0].text}\n            </PersonCardCategory>\n            <PersonCardBlurb>\n                {bio[0].text}\n            </PersonCardBlurb>\n            <PersonCardAction className=\"PersonCardAction\">\n                Details <span>&#8594;</span>\n            </PersonCardAction>\n        </PersonCardContent>\n    </PersonCardContainer>\n)\n\nexport default PersonCard;\n\nPersonCard.propTypes = {\n    link: PropTypes.string.isRequired,\n    name: PropTypes.array.isRequired,\n    title: PropTypes.array.isRequired,\n    image: PropTypes.object.isRequired,\n    bio: PropTypes.string.isRequired\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport Layout from \"components/Layout\";\nimport PersonCard from \"components/PersonCard\";\n\nconst WorkTitle = styled(\"h1\")`\n    margin-bottom: 1em;\n`\n\nconst PersonsContainer = styled(\"div\")`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nconst Work = ({ persons, meta }) => (\n    <>\n        <Helmet\n            title={`Team | Inclusive Creativity`}\n            titleTemplate={`%s`}\n            meta={[\n                {\n                    name: `description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:title`,\n                    content: `Team | Inclusive Creativity`,\n                },\n                {\n                    property: `og:description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: meta.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: meta.title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: meta.description,\n                },\n            ].concat(meta)}\n        />\n        <Layout>\n            <WorkTitle>\n                Team\n            </WorkTitle>\n            <PersonsContainer>\n                {persons.map((person, i) => (\n                    <PersonCard\n                        link={person.node.link.url}\n                        name={person.node.name}\n                        title={person.node.title}\n                        image={person.node.image}\n                        bio={person.node.bio}\n                    />\n                ))}\n            </PersonsContainer>\n        </Layout>\n    </>\n);\n\nexport default ({ data }) => {\n    const persons = data.prismic.allPersons.edges;\n    const meta = data.site.siteMetadata;\n    if (!persons) return null;\n\n    persons.sort((a, b) => {\n        const aTitle = a.node.title[0].text;\n        const bTitle = b.node.title[0].text;\n        if (aTitle.indexOf(\"Principal Investigator\") === 0) {\n            return -1;\n        } else if (bTitle.indexOf(\"Principal Investigator\") === 0) {\n            return 1;\n        } else if (aTitle.indexOf(\"Principal Investigator\") !== -1) {\n            return -1;\n        } else if (bTitle.indexOf(\"Principal Investigator\") !== -1) {\n            return 1;\n        }\n        return 0;\n    });\n    return (\n        <Work persons={persons} meta={meta}/>\n    )\n}\n\nWork.propTypes = {\n    persons: PropTypes.array.isRequired,\n};\n\nexport const query = graphql`\n    {\n        prismic {\n            allPersons {\n              edges {\n                node {\n                  name\n                  title\n                  link {\n                    ... on PRISMIC__ExternalLink {\n                      url\n                    }\n                  }\n                  image\n                  bio\n                }\n              }\n            }\n          }\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`\n"],"sourceRoot":""}