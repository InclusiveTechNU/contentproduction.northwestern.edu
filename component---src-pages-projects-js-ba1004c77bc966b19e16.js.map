{"version":3,"sources":["webpack:///./src/components/ProjectCard.jsx","webpack:///./src/pages/projects.js"],"names":["ProjectCardOuterContainer","dimensions","maxwidthMobile","ProjectCardContainer","maxwidthTablet","props","secondaryColor","ProjectCardContent","ProjectCardCategory","colors","grey600","ProjectCardTitle","ProjectCardBlurb","ProjectCardImageContainer","ProjectCardResources","ProjectCard","category","title","description","thumbnail","color","uid","resources","aria-label","text","to","className","aria-hidden","RichText","render","style","background","src","url","alt","role","WorkTitle","Work","projects","meta","titleTemplate","name","content","property","author","concat","Layout","map","project","i","key","node","project_category","project_title","project_preview_description","project_description","project_preview_thumbnail","_meta","primary_color","secondary_color","query","data","prismic","allProjects","edges","site","siteMetadata"],"mappings":"sOAQMA,EAA4B,YAAO,MAAP,qBAAH,wJAORC,IAAWC,eAPH,6GAiBzBC,EAAuB,YAAO,MAAP,qBAAH,wHAQHF,IAAWG,eARR,oEAcL,SAAAC,GAAK,OAAIA,EAAMC,iBAdV,qRAoCpBC,EAAqB,YAAO,MAAP,qBAAH,0IASDN,IAAWG,eATV,oBAclBI,EAAsB,YAAO,KAAP,qBAAH,yBAEZC,IAAOC,QAFK,KAKnBC,EAAmB,YAAO,KAAP,qBAAH,iEAKhBC,EAAmB,YAAO,MAAP,qBAAH,2EAKCX,IAAWG,eALZ,6BA0BhBS,EAA4B,YAAO,MAAP,qBAAH,+GAORZ,IAAWG,eAPH,mMAsBT,SAAAC,GAAK,OAAIA,EAAMC,iBAtBN,oHAgCJL,IAAWG,eAhCP,0BAsCzBU,EAAsB,YAAO,MAAP,qBAAF,0FAgCXC,EAtBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,UAAgBC,GAAjD,EAA4CC,IAA5C,EAAiDD,OAAOd,EAAxD,EAAwDA,eAAgBgB,EAAxE,EAAwEA,UAAxE,OAChB,YAACtB,EAAD,KACI,YAACG,EAAD,CAAsBoB,aAAA,YAAyBN,EAAM,GAAGO,KAAQlB,eAAgBA,EAAgBmB,GAAE,iBAC9F,YAAClB,EAAD,CAAoBD,eAAgBA,EAAgBoB,UAAU,sBAC1D,YAAClB,EAAD,CAAqBmB,cAAY,QAC5BX,EAAS,GAAGQ,MAEjB,YAACb,EAAD,CAAkBgB,cAAY,QACzBV,EAAM,GAAGO,MAEd,YAACZ,EAAD,KACKgB,WAASC,OAAOX,IAErB,YAACJ,EAAD,KAAuBc,WAASC,OAAOP,KAE3C,YAACT,EAAD,CAA2Bc,cAAY,OAAOrB,eAAgBA,EAAgBwB,MAAO,CAACC,WAAYX,GAAQM,UAAU,6BAChH,mBAAKM,IAAKb,EAAUc,IAAKC,IAAI,GAAGC,KAAK,qB,sCCvKrD,IAAMC,EAAY,YAAO,KAAP,qBAAH,6CAITC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACT,8BACI,YAAC,IAAD,CACItB,MAAK,kCACLuB,cAAa,KACbD,KAAM,CACF,CACIE,KAAK,cACLC,QAASH,EAAKrB,aAElB,CACIyB,SAAS,WACTD,QAAQ,mCAEZ,CACIC,SAAS,iBACTD,QAASH,EAAKrB,aAElB,CACIyB,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,QAASH,EAAKK,QAElB,CACIH,KAAK,gBACLC,QAASH,EAAKtB,OAElB,CACIwB,KAAK,sBACLC,QAASH,EAAKrB,cAEpB2B,OAAON,KAEb,YAACO,EAAA,EAAD,KACI,YAACV,EAAD,iBAGA,8BACKE,EAASS,KAAI,SAACC,EAASC,GAAV,OACV,YAAC,EAAD,CACIC,IAAKD,EACLjC,SAAUgC,EAAQG,KAAKC,iBACvBnC,MAAO+B,EAAQG,KAAKE,cACpBnC,YAAa8B,EAAQG,KAAKG,4BAC1BhC,UAAW0B,EAAQG,KAAKI,oBACxBpC,UAAW6B,EAAQG,KAAKK,0BACxBnC,IAAK2B,EAAQG,KAAKM,MAAMpC,IACxBD,MAAO4B,EAAQG,KAAKO,cACpBpD,eAAgB0C,EAAQG,KAAKQ,yBAsBxCC,GAdE,sBAAe,IAAZC,EAAW,EAAXA,KACRvB,EAAWuB,EAAKC,QAAQC,YAAYC,MACpCzB,EAAOsB,EAAKI,KAAKC,aACvB,OAAK5B,EAGD,YAAC,EAAD,CAAMA,SAAUA,EAAUC,KAAMA,IAHd,MAWR","file":"component---src-pages-projects-js-ba1004c77bc966b19e16.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { RichText } from \"prismic-reactjs\";\nimport styled from \"@emotion/styled\";\nimport dimensions from \"styles/dimensions\";\nimport colors from \"styles/colors\";\nimport PropTypes from \"prop-types\";\n\nconst ProjectCardOuterContainer = styled(\"div\")`\n    box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.06);\n    margin-bottom: 4em;\n    transition: all 150ms ease-in-out;\n    text-decoration: none;\n    color: currentColor;\n\n    @media(max-width:${dimensions.maxwidthMobile}px) {\n        margin-bottom: 2em;\n    }\n\n    &:hover {\n        box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.1);\n        transition: all 150ms ease-in-out;\n    }\n`;\n\nconst ProjectCardContainer = styled(\"div\")`\n    display: grid;\n    grid-template-columns: 4fr 7fr;\n\n    @media(max-width:950px) {\n        grid-template-columns: 4.5fr 7fr;\n    }\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        grid-template-columns: 1fr;\n    }\n\n    &:hover {\n        .ProjectCardAction {\n            color: ${props => props.secondaryColor};\n            transition: all 150ms ease-in-out;\n\n            span {\n                transform: translateX(0px);\n                opacity: 1;\n                transition: transform 150ms ease-in-out;\n            }\n        }\n\n        .ProjectCardContent::before {\n            opacity: 0.02;\n            transition: all 150ms ease-in-out;\n        }\n\n        .ProjectCardImageContainer::before {\n            opacity: 0.2;\n            transition: all 150ms ease-in-out;\n        }\n    }\n`\n\nconst ProjectCardContent = styled(\"div\")`\n    background: white;\n    padding: 4em 3em 2.25em 3em;\n    position: relative;\n\n    @media(max-width:950px) {\n        padding: 3.25em 2.5em 2em 2.5em;\n    }\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        grid-row: 2;\n    }\n`\n\nconst ProjectCardCategory = styled(\"h6\")`\n    font-weight: 600;\n    color: ${colors.grey600};\n`\n\nconst ProjectCardTitle = styled(\"h3\")`\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n`\n\nconst ProjectCardBlurb = styled(\"div\")`\n    margin-bottom: 0.5em;\n    margin-top: 0.5em;\n    margin-bottom: 5em;\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        margin-bottom: 2.5em;\n    }\n`\n\nconst ProjectCardAction = styled(\"div\")`\n    font-weight: 600;\n    text-decoration: none;\n    color: currentColor;\n    transition: all 150ms ease-in-out;\n    bottom: 45px;\n    position: absolute;\n\n    span {\n        margin-left: 1em;\n        transform: translateX(-8px);\n        display: inline-block;\n        transition: transform 400ms ease-in-out;\n    }\n`\n\nconst ProjectCardImageContainer = styled(\"div\")`\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    overflow: hidden;\n    position: relative;\n\n    @media(max-width:${dimensions.maxwidthTablet}px) {\n        padding-top: 3em;\n        max-height: 200px;\n        flex-direction: column;\n        align-items: center;\n        justify-content: flex-start;\n    }\n\n    &:before {\n        position: absolute;\n        content: \"\";\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        background: ${props => props.secondaryColor};\n        mix-blend-mode: multiply;\n        opacity: 0;\n        transition: all 150ms ease-in-out;\n    }\n\n    img {\n        height: 100%;\n        width: 100%;\n\n        @media(max-width:${dimensions.maxwidthTablet}px) {\n            max-width: 300px;\n        }\n    }\n`\n\nconst ProjectCardResources= styled(\"div\")`\n    text-align: left;\n    background: white;\n    width: 100%;\n    h1 {\n        font-size: 19px;\n    }\n\n`\n\nconst ProjectCard = ({ category, title, description, thumbnail, uid, color, secondaryColor, resources}) => (\n    <ProjectCardOuterContainer>\n        <ProjectCardContainer aria-label={ `Project: ${title[0].text}`} secondaryColor={secondaryColor} to={`/publications`}>\n            <ProjectCardContent secondaryColor={secondaryColor} className=\"ProjectCardContent\">\n                <ProjectCardCategory aria-hidden=\"true\">\n                    {category[0].text}\n                </ProjectCardCategory>\n                <ProjectCardTitle aria-hidden=\"true\">\n                    {title[0].text}\n                </ProjectCardTitle>\n                <ProjectCardBlurb>\n                    {RichText.render(description)}\n                </ProjectCardBlurb>\n                <ProjectCardResources>{RichText.render(resources)}</ProjectCardResources>\n            </ProjectCardContent>\n            <ProjectCardImageContainer aria-hidden=\"true\" secondaryColor={secondaryColor} style={{background: color}} className=\"ProjectCardImageContainer\">\n                <img src={thumbnail.url} alt=\"\" role=\"presentation\"/>\n            </ProjectCardImageContainer>\n        </ProjectCardContainer>\n    </ProjectCardOuterContainer>\n)\n\nexport default ProjectCard;\n\nProjectCard.propTypes = {\n    category: PropTypes.array.isRequired,\n    thumbnail: PropTypes.object.isRequired,\n    title: PropTypes.array.isRequired,\n    description: PropTypes.array.isRequired,\n    resources: PropTypes.array.isRequired,\n    uid: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    secondaryColor: PropTypes.string.isRequired\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport Layout from \"components/Layout\";\nimport ProjectCard from \"components/ProjectCard\";\n\nconst WorkTitle = styled(\"h1\")`\n    margin-bottom: 1em;\n`\n\nconst Work = ({ projects, meta }) => (\n    <>\n        <Helmet\n            title={`Projects | Inclusive Creativity`}\n            titleTemplate={`%s`}\n            meta={[\n                {\n                    name: `description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:title`,\n                    content: `Projects | Inclusive Creativity`,\n                },\n                {\n                    property: `og:description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: meta.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: meta.title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: meta.description,\n                },\n            ].concat(meta)}\n        />\n        <Layout>\n            <WorkTitle>\n                Projects\n            </WorkTitle>\n            <>\n                {projects.map((project, i) => (\n                    <ProjectCard\n                        key={i}\n                        category={project.node.project_category}\n                        title={project.node.project_title}\n                        description={project.node.project_preview_description}\n                        resources={project.node.project_description}\n                        thumbnail={project.node.project_preview_thumbnail}\n                        uid={project.node._meta.uid}\n                        color={project.node.primary_color}\n                        secondaryColor={project.node.secondary_color}\n                    />\n                ))}\n            </>\n        </Layout>\n    </>\n);\n\nexport default ({ data }) => {\n    const projects = data.prismic.allProjects.edges;\n    const meta = data.site.siteMetadata;\n    if (!projects) return null;\n\n    return (\n        <Work projects={projects} meta={meta}/>\n    )\n}\n\nWork.propTypes = {\n    projects: PropTypes.array.isRequired,\n};\n\nexport const query = graphql`\n    {\n        prismic {\n            allProjects {\n                edges {\n                    node {\n                        project_title\n                        project_preview_description\n                        project_preview_thumbnail\n                        project_category\n                        project_post_date\n                        project_description\n                        secondary_color\n                        primary_color\n                        _meta {\n                            uid\n                        }\n                    }\n                }\n            }\n        }\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`\n"],"sourceRoot":""}